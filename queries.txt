WHERE - Used to filter data(works like find in MongoDB)
ORDER BY - Used to order data(works like sort in MongoDB)
ALTER TABLE - Used to edit the table(works like findOneAndUpdate, updateMany etc.)
DISTINCT - Used to find distinct values(works like $group in MongoDB)
COUNT - Used to give the count of rows of data in the database. Note: This will skip counting the entries which have NULL values
GROUP BY - Used to perform aggregation queries(works like $group in MongoDB)
Wildcards(done by LIKE) - Used to match with a specific pattern(works like $regex in MongoDB) --> % = any number of characters, _ = one character
UNION - It is a special SQL operator which is used to combine multiple SELECT statements into one
Note: 1. There should be same number of columns in the previous query and the next query
      2. The data type of the columns should also be same

JOINS - Used to combine rows from two or more tables based on a related column between them
Inner Join - Simple JOIN, where only matching rows from both the tables are selected
Left Join - All rows from Inner Join, + the rows from LEFT table(i.e. table in FROM statement)
Right Join - All rows from Inner Join, + the rows from RIGHT table(i.e. table in JOIN statement)
Full Outer Join - Selecting all rows from both the tables irrespective of they met the criteria or not. Not implemented in this exercise.
Nested Queries - These comprise of multiple SELECT statements to find specific piece of information.
When to use nested queries: These are used when data of one query is passed to another query. This is like filtering data.
JOIN/RIGHT JOIN/LEFT JOIN vs nested queries: These can't replace nested queries as they project NULL, when there is no data, rather than filtering them.
On Delete - CASCADE and NOT NULL.


1. Student Database queries.
------------------------------------------------------------------------
CREATE DATABASE student;

USE student;

CREATE TABLE student(
    student_id INT,
    name VARCHAR(20),
    major VARCHAR(20),
    PRIMARY KEY (student_id)
);

//Describing the table.
DESCRIBE student;

//Dropping the table(similar to dropping a collection in MongoDB).
DROP TABLE student;

//Adding a column to the table.
ALTER TABLE student ADD gpa DECIMAL(3,2);

//Dropping a column from the table.
ALTER TABLE student DROP COLUMN gpa;

//Inserting values into the table.
INSERT INTO student VALUES(1,'Ramu Kumar', 'Biology');
INSERT INTO student VALUES(2,'Krishna Kumar', 'Mathematics');
INSERT INTO student VALUES(3,'Basant gaurav', 'English');
INSERT INTO student VALUES(4,'Hello Singh', 'Physics');
INSERT INTO student VALUES(5,'Sonny Middleton', 'Chemistry');
INSERT INTO student VALUES(6,'Tony Stark', 'Geography');

//To view all data.
SELECT * FROM student;

//Inserting values into specific columns.
INSERT INTO student(student_id, name) VALUES(3,'Mohan Das');

//Creating tables with constraints like NOT NULL and UNIQUE.
CREATE TABLE student(
    student_id INT AUTO_INCREMENT,
    name VARCHAR(20) NOT NULL,
    major VARCHAR(20),
    minor VARCHAR(20) DEFAULT 'undecided',
    PRIMARY KEY (student_id)
);

INSERT INTO student(name,major) VALUES('Ramu Kumar', 'Biology');
INSERT INTO student(name,major) VALUES('Krishna Kumar', 'Mathematics');
INSERT INTO student(name,major) VALUES('Basant gaurav', 'English');
INSERT INTO student(name,major) VALUES('Hello Singh', 'Physics');
INSERT INTO student(name,major) VALUES('Sonny Middleton', 'Chemistry');
INSERT INTO student(name,major) VALUES('Tony Stark', 'Geography');
INSERT INTO student(name,major) VALUES('Kim Kumar', 'Chemistry');


//Updating a column in a table.

UPDATE student
SET major = 'Bio'
WHERE student_id = 1;

//Using OR operator.

    UPDATE student
    SET major = 'BioChemistry'
    WHERE major = 'Biology' OR major = 'Chemistry';

//Setting multiple values in SET.

UPDATE student
SET name = 'TOM', major = 'BioChemistry'
WHERE major = 'Biology' OR major = 'Chemistry';


//Delete all of the rows inside the table.
DELETE FROM student
WHERE student_id = 6;


//Querying data from Database.

SELECT name,major
FROM student;

//Setting alias for column name.
SELECT name AS fullName, major AS newMajor
FROM student;

//Also we can use table name with dot operator to have a more concise understanding.
SELECT student.name,student.major
FROM student;

//ORDER BY operator. By default, it is in Ascending Order. Characters are sorted alphabetically.
SELECT name,major
FROM student
ORDER BY name;

SELECT *
FROM student
ORDER BY name DESC;

SELECT *
FROM student
ORDER BY major,student_id DESC;

//Limiting the number of rows in a query.
SELECT *
FROM student
LIMIT 2;

//Using GROUP BY and LIMIT simultaneously.
SELECT *
FROM student
ORDER BY student_id
LIMIT 2;

SELECT *
FROM student
ORDER BY student_id DESC
LIMIT 2;


//Filtering data in a query.
SELECT * FROM student
WHERE major = 'Biology';

//<> - Not equal to operator.
SELECT * FROM student
WHERE major <> 'Biology';


//Using IN.
SELECT * FROM student
WHERE name IN ('Krishna','Tony');

//Using multiple AND operator and IN operator.
SELECT * FROM student WHERE name IN ('Krishna Kumar') AND major IN('Mathematics') AND student_id = 9;

------------------------------------------------------------------------

2. Company Database queries.

-----------------------------------------------------------------------

CREATE TABLE employee(
    emp_id INT PRIMARY KEY,
    first_name VARCHAR (40),
    last_name VARCHAR (40),
    birth_day DATE,
    sex VARCHAR(1),
    salary INT,
    super_id INT,
    branch_id INT
);

CREATE TABLE branch(
    branch_id INT PRIMARY KEY,
    branch_name VARCHAR(40),
    mgr_id INT,
    mgr_start_date DATE,
    FOREIGN KEY(mgr_id) REFERENCES employee(emp_id) ON DELETE SET NULL 
);

ALTER TABLE employee
ADD FOREIGN KEY (branch_id)
REFERENCES branch(branch_id)
ON DELETE SET NULL;

ALTER TABLE employee
ADD FOREIGN KEY (super_id)
REFERENCES employee(emp_id)
ON DELETE SET NULL;

CREATE TABLE client(
    client_id INT PRIMARY KEY,
    client_name VARCHAR(40),
    branch_id INT,
    FOREIGN KEY(branch_id) REFERENCES branch(branch_id)
    ON DELETE SET NULL
);

CREATE TABLE works_with(
    emp_id INT,
    client_id INT,
    total_sales INT,
    PRIMARY KEY(emp_id, client_id),
    FOREIGN KEY(emp_id) REFERENCES employee(emp_id) ON DELETE CASCADE,
    FOREIGN KEY(client_id) REFERENCES client(client_id) ON DELETE CASCADE
);

CREATE TABLE branch_supplier(
    branch_id INT,
    supplier_name VARCHAR(40),
    supply_type VARCHAR(40),
    PRIMARY KEY(branch_id, supplier_name),
    FOREIGN KEY(branch_id) REFERENCES branch(branch_id) ON DELETE CASCADE
);

--- Corporate

INSERT INTO employee VALUES(100, 'David', 'Wallace', '1967-11-17', 'M', 250000, NULL, NULL);

INSERT INTO branch VALUES(1, 'Corporate', 100, '2006-02-09');

UPDATE employee
SET branch_id = 1
WHERE emp_id = 100;

INSERT INTO employee VALUES(101, 'Jan', 'Levinson', '1961-05-11', 'F', 110000, 100, 1);

-- Scranton
INSERT INTO employee VALUES(102, 'Michael', 'Scott', '1964-03-15', 'M', 75000, 100, NULL);

INSERT INTO branch VALUES(2, 'Scranton', 102, '1992-04-06');

UPDATE employee
SET branch_id = 2
WHERE emp_id = 102;

INSERT INTO employee VALUES(103, 'Angela', 'Martin', '1971-06-25', 'F', 63000, 102, 2);
INSERT INTO employee VALUES(104, 'Kelly', 'Kapoor', '1980-02-05', 'F', 55000, 102, 2);
INSERT INTO employee VALUES(105, 'Stanley', 'Hudson', '1958-02-19', 'M', 69000, 102, 2);


-- Stamford
INSERT INTO employee VALUES(106, 'Josh', 'Porter', '1969-09-05', 'M', 78000, 100, NULL);

INSERT INTO branch VALUES(3, 'Stamford', 106, '1998-02-13');

UPDATE employee
SET branch_id = 3
WHERE emp_id = 106;

INSERT INTO employee VALUES(107, 'Andy', 'Bernard', '1973-07-22', 'M', 65000, 106, 3);
INSERT INTO employee VALUES(108, 'Jim', 'Halpert', '1978-10-01', 'M', 71000, 106, 3);

-- BRANCH SUPPLIER
INSERT INTO branch_supplier VALUES(2, 'Hammer Mill', 'Paper');
INSERT INTO branch_supplier VALUES(2, 'Uni-ball', 'Writing Utensils');
INSERT INTO branch_supplier VALUES(3, 'Patriot Paper', 'Paper');
INSERT INTO branch_supplier VALUES(2, 'J.T. Forms & Labels', 'Custom Forms');
INSERT INTO branch_supplier VALUES(3, 'Uni-ball', 'Writing Utensils');
INSERT INTO branch_supplier VALUES(3, 'Hammer Mill', 'Paper');
INSERT INTO branch_supplier VALUES(3, 'Stamford Lables', 'Custom Forms');

-- CLIENT
INSERT INTO client VALUES(400, 'Dunmore Highschool', 2);
INSERT INTO client VALUES(401, 'Lackawana Country', 2);
INSERT INTO client VALUES(402, 'FedEx', 3);
INSERT INTO client VALUES(403, 'John Daly Law, LLC', 3);
INSERT INTO client VALUES(404, 'Scranton Whitepages', 2);
INSERT INTO client VALUES(405, 'Times Newspaper', 3);
INSERT INTO client VALUES(406, 'FedEx', 2);

-- WORKS_WITH
INSERT INTO works_with VALUES(105, 400, 55000);
INSERT INTO works_with VALUES(102, 401, 267000);
INSERT INTO works_with VALUES(108, 402, 22500);
INSERT INTO works_with VALUES(107, 403, 5000);
INSERT INTO works_with VALUES(108, 403, 12000);
INSERT INTO works_with VALUES(105, 404, 33000);
INSERT INTO works_with VALUES(107, 405, 26000);
INSERT INTO works_with VALUES(102, 406, 15000);
INSERT INTO works_with VALUES(105, 406, 130000);

//Find all employees ordered by salary.
SELECT * FROM employee
ORDER BY salary;


//Find all employees ordered by sex then name.
SELECT * FROM employee
ORDER BY sex,first_name,last_name;


//Find the first 5 employees in the table.
SELECT * FROM employee
LIMIT 5;


//Find first and last names of employees.
SELECT first_name, last_name FROM employee;

//Find thee fornames and surnames of all the employees.
SELECT first_name AS forName, last_name AS surName
FROM employee;

//Find out all the distinct genders.
SELECT DISTINCT sex
FROM employee;

SELECT COUNT(emp_id)
FROM employee;

//Find the number of female employees born after 1970.
SELECT COUNT(emp_id)
FROM employee
WHERE SEX = 'F' AND birth_day > '1970-01-01';


//Find the average of all employee's salaries.
SELECT AVG(salary) 
FROM employee;

//Find the average of all male employee's salaries.
SELECT AVG(salary) 
FROM employee
WHERE SEX = 'M';

//Find the sum of all employee's salaries.
SELECT SUM(salary) 
FROM employee;

//Find out how many males and how many females are there.
SELECT COUNT(sex)
FROM employee
GROUP BY sex;

//In order to display(add projection to the group by clause, we write the column name).
SELECT COUNT(sex), sex
FROM employee
GROUP BY sex;

//Find the total sales of each salesman.
SELECT SUM(total_sales), emp_id
FROM works_with
GROUP BY emp_id;

//Find the total amount spent by each client.
SELECT SUM(total_sales), client_id
FROM works_with
GROUP BY client_id;

//Find the number of clients who are an LLC.
SELECT * FROM client
WHERE client_name LIKE '%LLC';


//Find any branch suppliers who are in the label business.
//Here only 1 data shows up because there is a typo in the inserted data.
SELECT * FROM branch_supplier
WHERE supplier_name LIKE '%Labels';

//Find any employee born in October.
SELECT * FROM employee
WHERE birth_day LIKE '____-10%';


//Find any clients who are schools.
SELECT * FROM client
WHERE client_name LIKE '%school%';

//Find a list of employee and branch names.
SELECT first_name AS all_data
FROM employee;
UNION
SELCT branch_name
FROM branch;

//Find a list of all clients & branch suppliers' names.
SELECT client_name, branch_id AS all_data
FROM client
UNION
SELECT supplier_name, branch_id
FROM branch_supplier;

//This can also be written as,
SELECT client_name, client.branch_id AS all_data
FROM client
UNION
SELECT supplier_name, branch_supplier.branch_id
FROM branch_supplier;

//Find a list of all money spent or earned by the company.
SELECT salary FROM employee AS expense_data
UNION
SELECT total_sales FROM works_with;

//Inserting some data into branch table to perform JOINS.
INSERT INTO branch VALUES(4,'BUFFALO',NULL,NULL);

//Find all branches and the names of their managers.
SELECT employee.emp_id, employee.first_name, employee.last_name, branch.branch_name
FROM employee
JOIN branch
ON employee.emp_id = branch.mgr_id;

//Left Join.
SELECT employee.emp_id, employee.first_name, employee.last_name, branch.branch_name
FROM employee
LEFT JOIN branch
ON employee.emp_id = branch.mgr_id;

//Right Join.
SELECT employee.emp_id, employee.first_name, employee.last_name, branch.branch_name
FROM employee
RIGHT JOIN branch
ON employee.emp_id = branch.mgr_id;

//Find names of all employees who have sold over 30,000 dollars to a single client.
SELECT employee.first_name, employee.last_name
FROM employee
WHERE employee.emp_id IN (
    SELECT works_with.emp_id
    FROM works_with
    WHERE works_with.total_sales > 30000
);

//Find all clients who are handled by the branch that Michael Scott manages. Assume you know Michael's ID.
SELECT client.client_name
FROM client
WHERE client.branch_id = (
    SELECT branch.branch_id
    FROM branch
    WHERE branch.mgr_id = 102
    LIMIT 1 -- to make sure that only 1 data comes and is equated to the above query
);






-----------------------------------------------------------------------